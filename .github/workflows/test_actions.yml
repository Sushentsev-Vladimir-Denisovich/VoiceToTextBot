name: Test Telegram Bot Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create run script (Bash)
        run: |
          echo '#!/bin/bash' > run.sh
          echo 'unzip bot.zip' >> run.sh
          echo 'python bot.py' >> run.sh
          chmod +x run.sh

      - name: Build artifact
        run: zip -r bot.zip bot.py constants.py methods.py requirements.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bot
          path: bot.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: bot
          path: ./

      - name: Extract archive
        run: unzip bot.zip

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseName = 'Test Release';
            const releaseBody = 'Test release from manual run';
            const fs = require('fs');
            const path = require('path');
            const pullRequestNumber = context.payload.pull_request ? context.payload.pull_request.number : 'manual';
            const zipFilePath = path.join(process.env.GITHUB_WORKSPACE, 'bot.zip');
            const zipFile = fs.readFileSync(zipFilePath);
            const runScriptPath = path.join(process.env.GITHUB_WORKSPACE, 'run.sh');
            const runScript = fs.readFileSync(runScriptPath);

            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'test-release-' + pullRequestNumber,
              name: releaseName,
              body: releaseBody,
              draft: false,
              prerelease: true
            }).then(({data}) => {
              console.log('Created release: ' + data.html_url);
              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: data.id,
                name: 'bot.zip',
                data: zipFile,
                contentType: 'application/zip'
              }).then(() => {
                console.log('Uploaded bot.zip');
              }).catch(error => {
                console.error('Error uploading bot.zip asset:', error);
              });
            }).catch(error => {
              console.error('Error creating release:', error);
            });

